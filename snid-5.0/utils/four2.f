	SUBROUTINE FOUR2 (XDATA,N,NDIM,ISGN,IFORM,IER)

C	COOLEY-TUKEY FAST FOURIER TRANSFORM IN ANSI BASIC FORTRAN.
C	MULTI-DIMENSIONAL TRANSFORM, EACH DIMENSION A POWER OF TWO,
C	COMPLEX OR REAL DATA.  THE TRANSFORM DONE IS
C	DIMENSION XDATA(N(1),N(2),...,N(NDIM)),TRAN(N(1),...,N(NDIM))
C	TRAN(K1,K2,...) = FACTOR * SUM(XDATA(J1,J2,...)*EXP(ISGN*2*
C	PI*I*((J1-1)*(K1-1)/N(1)+(J2-1)*(K2-1)/N(2)+...))), SUMMED FOR ALL
C	J1 AND K1 FROM 1 TO N(1), J2 AND K2 FROM 1 TO N(2), ETC. FOR ALL
C	NDIM SUBSCRIPTS.  
C	FACTOR = NTOT if ISGN = +1 and FACTOR = 1 if ISGN = -1
C	NDIM MUST BE POSITIVE AND ALL N(IDIMX) POWERS OF
C	TWO.  NTOT = N(1)*N(2)*...*N(NDIM).  ISGN = +1 OR -1, FOR A
C	FORWARD OR AN INVERSE TRANSFORM.  IFORM = +1, 0, OR -1, AS DATA IS
C	COMPLEX, REAL OR THE FIRST HALF OF A COMPLEX ARRAY.  TRANSFORM
C	VALUES ARE RETURNED TO ARRAY XDATA.  THEY ARE COMPLEX, REAL OR
C	THE FIRST HALF OF A COMPLEX ARRAY, AS IFORM = 1, -1 OR 0.
C	THE TRANSFORM OF A REAL ARRAY (IFORM = 0) DIMENSIONED N(1) BY N(2)
C	BY ... WILL BE RETURNED IN THE SAME ARRAY, NOW CONSIDERED TO
C	BE COMPLEX OF DIMENSIONS N(1)/2+1 BY N(2) BY ....  NOTE THAT IF
C	IFORM = 0 OR -1, N(1) MUST BE EVEN, AND ENOUGH ROOM MUST BE
C	RESERVED.  THE MISSING VALUES MAY BE OBTAINED BY COMPLEX CONJUGA-
C	TION.  THE REVERSE TRANSFORMATION, OF A HALF COMPLEX ARRAY DIMEN-
C	SIONED N(1)/2+1 BY N(2) BY ..., IS ACCOMPLISHED BY SETTING IFORM
C	TO -1 AND REVERSING ISGN.  N(1) MUST BE THE TRUE N(1), NOT N(1)/2
C	+1.  THE TRANSFORM WILL BE REAL AND RETURNED TO THE INPUT ARRAY.
C	RUNNING TIME IS PROPORTIONAL TO NTOT*LOG2(NTOT), RATHER THAN
C	THE NAIVE NTOT**2.
C	WRITTEN BY NORMAN BRENNER, MIT, JUNE 1968.  SEE-- IEEE AUDIO
C	TRANSACTIONS, JUNE 1967 AND JUNE 1969, SPECIAL FFT ISSUES.

	DIMENSION XDATA(1), N(1)
	IF (IABS(NDIM-1)-NDIM+1+IABS(IABS(ISGN)-1)+IABS(IFORM)/2) 5,5,110
5	NTOT=1

	DO 10 IDIMX=1,NDIM
	IF (N(IDIMX)) 130,130,8
8	IF(N(IDIMX)-2**IFIX(ALOG(FLOAT(N(IDIMX)))/ALOG(2.)+.5))130,10,130
10	NTOT=NTOT*N(IDIMX)

	IF (IFORM) 70,20,20
20	NREM=NTOT

	DO 60 IDIMX=1,NDIM
	NREM=NREM/N(IDIMX)
	NPREV=NTOT/(N(IDIMX)*NREM)
	NCURR=N(IDIMX)
	IF (IDIMX-1+IFORM) 30,30,40
30	NCURR=NCURR/2
40	CALL BITRV (XDATA,NPREV,NCURR,NREM,N(IDIMX),ISGN)
	CALL DFT2 (XDATA,NPREV,NCURR,NREM,ISGN)
	IF (IDIMX-1+IFORM) 50,50,60
50	CALL FIXRL (XDATA,N(1),NREM,ISGN,IFORM)
	NTOT=(NTOT/N(1))*(N(1)/2+1)
60	CONTINUE
	GO TO 105

70	NTOT=(NTOT/N(1))*(N(1)/2+1)
	NREM=1

	DO 100 JDIM=1,NDIM
	IDIMX=NDIM+1-JDIM
	NCURR=N(IDIMX)
	IF (IDIMX-1) 80,80,90
80	NCURR=NCURR/2
	CALL FIXRL (XDATA,N(1),NREM,ISGN,IFORM)
	NTOT=NTOT/(N(1)/2+1)*N(1)
90	NPREV=NTOT/(N(IDIMX)*NREM)
	CALL BITRV (XDATA,NPREV,NCURR,NREM,N(IDIMX),ISGN)
	CALL DFT2 (XDATA,NPREV,NCURR,NREM,ISGN)
100	NREM=NREM*N(IDIMX)

105	IER=0
	RETURN

110	IER=1
	RETURN

130	IER=2
	RETURN

	END

	SUBROUTINE BITRV (XDATA,NPREV,N,NREM,NTRUE,ISGN)

C	PERMUTE THE DATA BY 'RSAL' AND DIVIDE BY NTRUE IF ISGN = +1.
C	DIMENSION XDATA(NPREV,N,NREM)
C	COMPLEX XDATA
C	EXCHANGE XDATA(J1,J4REV,J5) WITH XDATA(J1,J4,J5) FOR ALL J1 FROM 1
C	TO NPREV, ALL J4 FROM 1 TO N (WHICH MUST BE A POWER OF TWO), AND
C	ALL J5 FROM 1 TO NREM.  J4REV-1 IS THE RSAL OF J4-1.  E.G.
C	SUPPOSE N = 32.  THEN FOR J4-1 = 10011, J4REV-1 = 11001, ETC.

	DIMENSION XDATA(1)
	FACTOR=1.
	IF(ISGN.EQ.1) FACTOR=1./FLOAT(NTRUE)
	IP0=2
	IP1=IP0*NPREV
	IP4=IP1*N
	IP5=IP4*NREM
	I4REV=1
C	I4REV = 1+(J4REV-1)*IP1

	DO 60 I4=1,IP4,IP1
C	I4 = 1+(J4-1)*IP1
	IF (I4-I4REV) 10,10,30
10	I1MAX=I4+IP1-IP0

	DO 20 I1=I4,I1MAX,IP0
C	I1 = 1+(J1-1)*IP0+(J4-1)*IP1

	DO 20 I5=I1,IP5,IP4
C	I5 = 1+(J1-1)*IP0+(J4-1)*IP1+(J5-1)*IP4
	I5REV=I4REV+I5-I4
C	I5REV = 1+(J1-1)*IP0+(J4REV-1)*IP1+(J5-1)*IP4
	TEMPR=XDATA(I5)
	TEMPI=XDATA(I5+1)
	XDATA(I5)=FACTOR*XDATA(I5REV)
	XDATA(I5+1)=FACTOR*XDATA(I5REV+1)
	XDATA(I5REV)=FACTOR*TEMPR
20	XDATA(I5REV+1)=FACTOR*TEMPI
C	ADD ONE TO THE HIGH ORDER 4REV-1 WITH DOWNWARD CARRY.
30	IP2=IP4/2
40	IF (I4REV-IP2) 60,60,50
50	I4REV=I4REV-IP2
	IP2=IP2/2
	IF (IP2-IP1) 60,40,40
60	I4REV=I4REV+IP2

	RETURN
	END

	SUBROUTINE DFT2 (XDATA,NPREV,N,NREM,ISGN)

C	DISCRETE FOURIER TRANSFORM OF LENGTH N.  IN-PLACE COOLEY-TUKEY
C	ALGORITHM, BIT-REVERSED TO NORMAL ORDER, SANDE-TUKEY PHASE SHIFTS.
C	DIMENSION XDATA(NPREV,N,NREM)
C	XDATA(J1,K4,J5) = SUM(XDATA(J1,J4,J5)*EXP(ISGN*2*PI*I*(J4-1)*
C	(K4-1)/N)), SUMMED OVER J4 = 1 TO N FOR ALL J1 FROM 1 TO NPREV,
C	K4 FROM 1 TO N AND J5 FROM 1 TO NREM.  N MUST BE A POWER OF TWO.
C	METHOD--LET IPREV TAKE THE VALUES 1, 2 OR 4, 4 OR 8, ..., N/16,
C	N/4, N.  THE CHOICE BETWEEN 2 OR 4, ETC., DEPENDS ON WHETHER N IS
C	A POWER OF FOUR.  DEFINE IFACT = 2 OR 4, THE NEXT FACTOR THAT
C	IPREV MUST TAKE, AND IREM = N/(IFACT*IPREV).  THEN--
C	DIMENSION XDATA(NPREV,IPREV,IFACT,IREM,NREM)
C	COMPLEX XDATA
C	XDATA(J1,J2,K3,J4,J5) = SUM(XDATA(J1,J2,J3,J4,J5)*EXP(ISGN*2*PI*I*
C	(K3-1)*((J3-1)/IFACT+(J2-1)/(IFACT*IPREV)))), SUMMED OVER J3 = 1
C	TO IFACT FOR ALL J1 FROM 1 TO NPREV, J2 FROM 1 TO IPREV, K3 FROM
C	1 TO IFACT, J4 FROM 1 TO IREM AND J5 FROM 1 TO NREM.  THIS IS
C	A PHASE-SHIFTED DISCRETE FOURIER TRANSFORM OF LENGTH IFACT.
C	FACTORING N BY FOURS SAVES ABOUT TWENTY FIVE PERCENT OVER FACTOR-
C	ING BY TWOS.  XDATA MUST BE BIT-REVERSED INITIALLY.

	DIMENSION XDATA(1)
	TWOPI=6.2831853071795865D0*DFLOAT(ISGN)
	IP0=2
	IP1=IP0*NPREV
	IP4=IP1*N
	IP5=IP4*NREM
	IP2=IP1
	NPART=N
10	IF (NPART-2) 70,30,20
20	NPART=NPART/4
	GO TO 10

C	DO A FOURIER TRANSFORM OF LENGTH TWO
30	IF (IP2-IP4) 40,170,170
40	IP3=IP2*2
C	IP2=IP1*IPROD
C	IP3=IP2*IFACT

	DO 50 I1=1,IP1,IP0
C	I1 = 1+(J1-1)*IP0

	DO 50 I5=I1,IP5,IP3
C	I5 = 1+(J1-1)*IP0+(J4-1)*IP3+(J5-1)*IP4
	I3A=I5
	I3B=I3A+IP2
C	I3 = 1+(J1-1)*IP0+(J2-1)*IP1+(J3-1)*IP2+(J4-1)*IP3+(J5-1)*IP4
	TEMPR=XDATA(I3B)
	TEMPI=XDATA(I3B+1)
	XDATA(I3B)=XDATA(I3A)-TEMPR
	XDATA(I3B+1)=XDATA(I3A+1)-TEMPI
	XDATA(I3A)=XDATA(I3A)+TEMPR
50	XDATA(I3A+1)=XDATA(I3A+1)+TEMPI

C	DO A FOURIER TRANSFORM OF LENGTH FOUR (FROM BIT REVERSED ORDER)
60	IP2=IP3
70	IF (IP2-IP4) 80,170,170
80	IP3=IP2*4
	THETA=TWOPI/FLOAT(IP3/IP1)
	SINTH=SIN(THETA/2.)
	WSTPR=-2.*SINTH*SINTH
C	COS(THETA)-1, FOR ACCURACY.
	WSTPI=SIN(THETA)
	WR=1.
	WI=0.

	DO 160 I2=1,IP2,IP1
C	I2 = 1+(J2-1)*IP1
	IF (I2-1) 100,100,90
90	W2R=WR*WR-WI*WI
	W2I=2.*WR*WI
	W3R=W2R*WR-W2I*WI
	W3I=W2R*WI+W2I*WR
100	I1MAX=I2+IP1-IP0

	DO 150 I1=I2,I1MAX,IP0
C	I1 = 1+(J1-1)*IP0

	DO 150 I5=I1,IP5,IP3
C	I5 = 1+(J1-1)*IP0+(J4-1)*IP3+(J5-1)*IP4
	I3A=I5
	I3B=I3A+IP2
	I3C=I3B+IP2
	I3D=I3C+IP2
C	I3 = 1+(J1-1)*IP0+(J2-1)*IP1+(J3-1)*IP2+(J4-1)*IP3+(J5-1)*IP4
	IF (I2-1) 120,120,110

C	APPLY THE PHASE SHIFT FACTORS
110	TEMPR=XDATA(I3B)
	XDATA(I3B)=W2R*TEMPR-W2I*XDATA(I3B+1)
	XDATA(I3B+1)=W2R*XDATA(I3B+1)+W2I*TEMPR
	TEMPR=XDATA(I3C)
	XDATA(I3C)=WR*TEMPR-WI*XDATA(I3C+1)
	XDATA(I3C+1)=WR*XDATA(I3C+1)+WI*TEMPR
	TEMPR=XDATA(I3D)
	XDATA(I3D)=W3R*TEMPR-W3I*XDATA(I3D+1)
	XDATA(I3D+1)=W3R*XDATA(I3D+1)+W3I*TEMPR
120	T0R=XDATA(I3A)+XDATA(I3B)
	T0I=XDATA(I3A+1)+XDATA(I3B+1)
	T1R=XDATA(I3A)-XDATA(I3B)
	T1I=XDATA(I3A+1)-XDATA(I3B+1)
	T2R=XDATA(I3C)+XDATA(I3D)
	T2I=XDATA(I3C+1)+XDATA(I3D+1)
	T3R=XDATA(I3C)-XDATA(I3D)
	T3I=XDATA(I3C+1)-XDATA(I3D+1)
	XDATA(I3A)=T0R+T2R
	XDATA(I3A+1)=T0I+T2I
	XDATA(I3C)=T0R-T2R
	XDATA(I3C+1)=T0I-T2I
	IF (ISGN) 130,130,140
130	T3R=-T3R
	T3I=-T3I
140	XDATA(I3B)=T1R-T3I
	XDATA(I3B+1)=T1I+T3R
	XDATA(I3D)=T1R+T3I
150	XDATA(I3D+1)=T1I-T3R

	TEMP=WR
	WR=WSTPR*WR-WSTPI*WI+WR
	WI=WSTPR*WI+WSTPI*TEMP+WI
C	OMIT THE NEXT THREE CARDS IF ROUNDED ARITHMETIC IS USED.
	FACTR=1.5-.5*(WR*WR+WI*WI)
	WR=WR*FACTR
160	WI=WI*FACTR
	GO TO 60

170	RETURN
	END

	SUBROUTINE FIXRL (XDATA,N,NREM,ISGN,IFORM)

C	FOR IFORM = 0, CONVERT THE TRANSFORM OF A DOUBLED-UP REAL ARRAY,
C	CONSIDERED COMPLEX, INTO ITS TRUE TRANSFORM.  SUPPLY ONLY THE
C	FIRST HALF OF THE COMPLEX TRANSFORM, AS THE SECOND HALF HAS
C	CONJUGATE SYMMETRY.  FOR IFORM = -1, CONVERT THE FIRST HALF
C	OF THE TRUE TRANSFORM INTO THE TRANSFORM OF A DOUBLED-UP REAL
C	ARRAY.  N MUST BE EVEN.
C	USING COMPLEX NOTATION AND SUBSCRIPTS STARTING AT ZERO, THE
C	TRANSFORMATION IS--
C	DIMENSION XDATA(N/2,NREM)
C	ZSTP = EXP(ISGN*2*PI*I/N)
C	DO 10 I2=0,NREM-1
C	XDATA(0,I2) = CONJ(XDATA(0,I2))*(1+I)
C	DO 10 I1=1,N/4
C	Z = (1+(2*IFORM+1)*I*ZSTP**I1)/2
C	I1CNJ = N/2-I1
C	DIF = XDATA(I1,I2)-CONJ(XDATA(I1CNJ,I2))
C	TEMP = Z*DIF
C	XDATA(I1,I2) = (XDATA(I1,I2)-TEMP)*(1-IFORM)
C 10  XDATA(I1CNJ,I2) = (XDATA(I1CNJ,I2)+CONJ(TEMP))*(1-IFORM)
C	IF I1=I1CNJ, THE CALCULATION FOR THAT VALUE COLLAPSES INTO
C	A SIMPLE CONJUGATION OF XDATA(I1,I2).

*	DIMENSION XDATA(1) -- replaced by S. Blondin
	DIMENSION XDATA(*)
	TWOPI=6.2831853071795865D0*DFLOAT(ISGN)
	IP0=2
	IP1=IP0*(N/2)
	IP2=IP1*NREM
	IF (IFORM) 10,70,70
C	PACK THE REAL INPUT VALUES (TWO PER COLUMN)
10	J1=IP1+1
	XDATA(2)=XDATA(J1)
	IF (NREM-1) 70,70,20
20	J1=J1+IP0
	I2MIN=IP1+1

	DO 60 I2=I2MIN,IP2,IP1
	XDATA(I2)=XDATA(J1)
	J1=J1+IP0
	IF (N-2) 50,50,30
30	I1MIN=I2+IP0
	I1MAX=I2+IP1-IP0

	DO 40 I1=I1MIN,I1MAX,IP0
	XDATA(I1)=XDATA(J1)
	XDATA(I1+1)=XDATA(J1+1)
40	J1=J1+IP0

50	XDATA(I2+1)=XDATA(J1)
60	J1=J1+IP0

70	DO 80 I2=1,IP2,IP1
	TEMPR=XDATA(I2)
	XDATA(I2)=XDATA(I2)+XDATA(I2+1)
80	XDATA(I2+1)=TEMPR-XDATA(I2+1)

	IF (N-2) 200,200,90
90	THETA=TWOPI/FLOAT(N)
	SINTH=SIN(THETA/2.)
	ZSTPR=-2.*SINTH*SINTH
	ZSTPI=SIN(THETA)
	ZR=(1.-ZSTPI)/2.
	ZI=(1.+ZSTPR)/2.
	IF (IFORM) 100,110,110
100	ZR=1.-ZR
	ZI=-ZI
110	I1MIN=IP0+1
	I1MAX=IP0*(N/4)+1

	DO 190 I1=I1MIN,I1MAX,IP0
	DO 180 I2=I1,IP2,IP1
	I2CNJ=I2+IP0*(N/2)-2*(I1-1)
	IF (I2-I2CNJ) 150,120,120
120	IF (ISGN*(2*IFORM+1)) 130,140,140
130	XDATA(I2+1)=-XDATA(I2+1)
140	IF (IFORM) 170,180,180
150	DIFR=XDATA(I2)-XDATA(I2CNJ)
	DIFI=XDATA(I2+1)+XDATA(I2CNJ+1)
	TEMPR=DIFR*ZR-DIFI*ZI
	TEMPI=DIFR*ZI+DIFI*ZR
	XDATA(I2)=XDATA(I2)-TEMPR
	XDATA(I2+1)=XDATA(I2+1)-TEMPI
	XDATA(I2CNJ)=XDATA(I2CNJ)+TEMPR
	XDATA(I2CNJ+1)=XDATA(I2CNJ+1)-TEMPI
	IF (IFORM) 160,180,180
160	XDATA(I2CNJ)=XDATA(I2CNJ)+XDATA(I2CNJ)
	XDATA(I2CNJ+1)=XDATA(I2CNJ+1)+XDATA(I2CNJ+1)
170	XDATA(I2)=XDATA(I2)+XDATA(I2)
	XDATA(I2+1)=XDATA(I2+1)+XDATA(I2+1)
180	CONTINUE

	TEMP=ZR-.5
	ZR=ZSTPR*TEMP-ZSTPI*ZI+ZR
	ZI=ZSTPR*ZI+ZSTPI*TEMP+ZI
C	OMIT THE NEXT THREE CARDS IF ROUNDED ARITHMETIC IS USED.
	FACTR=1.5-2.*((ZR-.5)*(ZR-.5)+ZI*ZI)
	ZR=.5+(ZR-.5)*FACTR
190	ZI=ZI*FACTR

200	IF (IFORM) 270,210,210
C	UNPACK THE REAL TRANSFORM VALUES (TWO PER COLUMN)
210	I2=IP2+1
	I1=I2
	J1=IP0*(N/2+1)*NREM+1
	GO TO 250

220	XDATA(J1)=XDATA(I1)
	XDATA(J1+1)=XDATA(I1+1)
	I1=I1-IP0
	J1=J1-IP0
230	IF (I2-I1) 220,240,240
240	XDATA(J1)=XDATA(I1)
	XDATA(J1+1)=0.
250	I2=I2-IP1
	J1=J1-IP0
	XDATA(J1)=XDATA(I2+1)
	XDATA(J1+1)=0.
	I1=I1-IP0
	J1=J1-IP0
	IF (I2-1) 260,260,230
260	XDATA(2)=0.

270	RETURN
	END
